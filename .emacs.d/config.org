#+TITLE: GNU Emacs Config
#+AUTHOR: Timothy Cronin
#+STARTUP: overview
#+DESCRIPTION: Timothy's GNU Emacs configuration

* Initialize Package

#+begin_src emacs-lisp
  ;; set up packages
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))
  (package-initialize)
  ;; initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

* Styling
** Theme

#+begin_src emacs-lisp
  ;; (use-package timu-spacegrey-theme
  ;;   :config
  ;;   (load-theme 'timu-spacegrey t))

  (use-package zenburn-theme
    :config
    (load-theme 'zenburn t))

  ;;  (load-theme 'tango t)
  
  ;; (custom-set-faces
  ;;  '(default ((t (:foreground "#d3b58d" :background "#041818"))))
  ;;  '(custom-proup-tag-face ((t (:underline t : foreground "liphtblue" ))) t)
  ;;  '(custom-variable-tag-face ((t (:underline t :foreground "lightblue"))) t)
  ;;  '(font-lock-builtin-face ((t nil)))
  ;;  '(font-lock-comment-face ((t (:foreground "#3fdf1f"))))
  ;;  '(font-lock-function-name-face ((((class color) (background dark)) (:foreground "white"))))
  ;;  '(font-lock-keyword-face ((t (:foreground "white" ))))
  ;;  '(font-lock-string-face ((t (:foreground "#Ofdfaf"))))
  ;;  '(font-lock-variable-name-face ((((class color) (background dark)) (: foreground "#c8d4ec"))))
  ;;  '(font-lock-warning-face ((t (:foreground "#584038"))))
  ;;  '(highlight ((t (:foreground "navyblue" :background "darkseagreen2"))))
  ;;  '(mode-line ((t (:inverse-video t))))
  ;;  '(region ((t (:background "blue"))))
  ;;  '(widget-field-face ((t (:foreground "white"))) t)
  ;;  '(widget-single-line-field-face ((t (:background "darkgray"))) t)
  ;;  )
  ;; (set-cursor-color "lightgreen")

  (set-cursor-color "#9a82b5")
#+end_src

** Frame Size

#+begin_src emacs-lisp
  ;; start in full screen
  (add-hook 'window-setup-hook 'toggle-frame-fullscreen t)

  ;; (setq frame-resize-pixelwise t)
  ;; (set-frame-size (selected-frame) 1024 600 t)

  ;; (defun my/frame-center ()
  ;;   (let* ((dw (display-pixel-width))
  ;;          (dh (display-pixel-height))
  ;;          (f  (selected-frame))
  ;;          (fw (frame-pixel-width f))
  ;;          (fh (frame-pixel-height f))
  ;;          (x  (- (/ dw 2) (/ fw 2)))
  ;;          (y  (- (/ dh 2) (/ fh 2))))
  ;;     (set-frame-position f x y)))
  #+end_src

  ** 
** Font
#+begin_src emacs-lisp
  ;; select a nerd font
  (set-face-attribute 'default nil :font "MesloLGS NF" :height 160)
#+end_src

** UI Disables 

#+begin_src emacs-lisp
  ;; disable the me
  (menu-bar-mode -1)

  ;; disable the toolbar
  (tool-bar-mode -1)

  ;; disable tooltips
  (tooltip-mode -1)

  ;; set fringe mode to provide some breathing room
  (set-fringe-mode 10)

  ;; remove scroll bars
  (scroll-bar-mode -1)

  ;; disable the startup screen
  (setq inhibit-startup-screen t)

  ;; disable audio beeps
  (setq visible-bell nil)
  (setq ring-bell-function 'ignore)

  ;; center frame after finishing customizing things that
  ;; can change the size of the window
  ;(my/frame-centerI)
#+end_src
* Keybindings
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
  (global-set-key (kbd "C-x g") 'magit-status)
  (global-set-key (kbd "C-c r") 'my/compile)

  (defun my/compile ()
    (interactive)
    (if (not (get-buffer "*compilation*"))
        (call-interactively 'compile)
      (recompile)))


  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src
* Buffer
** Tabs

#+begin_src emacs-lisp
  ;; set some editing config
  (setq-default indent-tabs-mode t)
  (setq-default tab-width 4)
  (setq-default evil-shift-width tab-width)
#+end_src

** Line and Column Numbers

#+begin_src emacs-lisp
  ;; enable line and column numbers
  (column-number-mode)

  ;; enable line numbers for some modes
  (dolist (mode '(text-mode-hook
                  prog-mode-hook
                  conf-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 1))))

  ;; override some modes which derive from the above
  ;; (dolist (mode '(org-mode-hook))
  ;; (add-hook mode (lambda () (display-line-numbers-mode 0))))

  ;; make typed things show up fast
  (setq echo-keystrokes 0.01)
#+end_src

* Change Backups Location
#+begin_src emacs-lisp
  ;; backup files in another directory
  (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
        backup-by-copying t    ; Don't delink hardlinks
        version-control t      ; Use version numbers on backups
        delete-old-versions t  ; Automatically delete excess backups
        kept-new-versions 20   ; how many of the newest versions to keep
        kept-old-versions 5    ; and how many of the old
        )
#+end_src
* Suggestion Engines
** swiper

#+begin_src emacs-lisp
  (use-package swiper)
#+end_src

** ivy

#+begin_src emacs-lisp
  (use-package ivy
    :diminish
    :bind ("C-s" . swiper)
    :init
    (ivy-mode 1))
#+end_src

** counsel

#+begin_src emacs-lisp
  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history)))
#+end_src

** which-key

#+begin_src emacs-lisp
  ;; which-key gives possible completions
  (use-package which-key
    :init (which-key-mode)
    ;; show possibles after 0.2 seconds
    (setq which-key-idle-delay 0.2))
#+end_src

* Modeline

#+begin_src emacs-lisp
  ;; run M-x nerd-icons-install-fonts to install the necessary fonts
  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))
#+end_src

* Evil Mode

#+begin_src emacs-lisp
  (use-package evil
    :init      ;; tweak evil's configuration before loading it
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    :config
    (evil-set-initial-state 'dired-mode 'emacs))
    ;; (evil-mode))
#+end_src

* Magit

#+begin_src emacs-lisp
  (use-package magit
    :bind ("C-M-;" . magit-status)
    :commands (magit-status magit-get-current-branch))
#+end_src

* Org Mode
*** Basic (use-package Statement)

#+begin_src emacs-lisp
  ;; Turn on indentation and auto-fill mode for Org files
  (defun my/org-mode-setup ()
    (org-indent-mode))

  (use-package org
    :hook (org-mode . my/org-mode-setup)
    :init
    (setq org-ellipsis " ▾")

    (setq org-agenda-files (list "~/Documents/org/"))

    (setq org-todo-keywords
          (quote ((sequence "TODO(t)" "|" "DOING(g)" "|" "DONE(d)"))))
    (setq org-agenda-custom-commands
          '(("d" "Dashboard"
             ((todo)
              (todo "DOING")
              (todo "DONE")
              (agenda))
             ((org-agenda-window-setup 'only-window)))))
    :config
    (set-face-underline 'org-ellipsis nil)
    (add-hook 'org-after-todo-statistics-hook #'my/org-summary-todo-cookie)
    (add-hook 'org-checkbox-statistics-hook #'my/org-summary-checkbox-cookie)
    )

  (setq org-directory "~/Documents/org")

  #+end_src
  
*** Heading Sizes

#+begin_src emacs-lisp
  (custom-set-faces
   '(org-level-1 ((t (:inherit outline-1 :height 1.3))))
   '(org-level-2 ((t (:inherit outline-2 :height 1.25))))
   '(org-level-3 ((t (:inherit outline-3 :height 1.2))))
   '(org-level-4 ((t (:inherit outline-4 :height 1.15))))
   '(org-level-5 ((t (:inherit outline-5 :height 1.1))))
   '(org-level-6 ((t (:inherit outline-6 :height 1.05))))
   '(org-level-7 ((t (:inherit outline-7 :height 1.0))))
   '(org-level-8 ((t (:inherit outline-8 :height 1.0))))
   )
#+end_src

*** List Config

#+begin_src emacs-lisp
  ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  ;; https://emacs.stackexchange.com/questions/19843/how-to-automatically-adjust-an-org-task-state-with-its-children-checkboxes
  (defun org-todo-if-needed (state)
    (unless (string-equal (org-get-todo-state) state)
      (org-todo state)))

  (defun my/org-summary-todo-cookie (n-done n-not-done)
    (let ((org-log-done nil)
          (org-log-states nil)) ; turn off logging
      (org-todo-if-needed
       (cond ((= n-done 0) "TODO")
             ((= n-not-done 0) "DONE")
             (t "DOING")))))
  (defun my/org-summary-checkbox-cookie ()
    (let ((beg (point))
          (end (save-excursion (end-of-line) (point))))
      (unless (not (org-get-todo-state))
        (save-excursion
          (org-back-to-heading t)
          (if (re-search-forward "\\[\\([0-9]*\\)/\\([0-9]*\\)\\]" end t)
              (let ((num-done (match-string 1))
                    (num-total (match-string 2)))
                (org-todo-if-needed
                 (cond ((equal num-done num-total) "DONE")
                       ((or (equal (string-trim num-done) "")
                            (equal num-done "0")) "TODO")
                       (t "DOING"))))
            (org-todo-if-needed "DOING"))))))


#+end_src

*** Captures

#+begin_src emacs-lisp

  (setq org-default-notes-file (concat org-directory "/captures.org"))
  (setq org-capture-templates
        '(("t"
           "Todo List Item"
           entry
           (file org-default-notes-file)
           "* TODO %?\n %i\n %a")))
#+end_src

* Coding
** Compile Customization

#+begin_src emacs-lisp
  (setq compile-command nil)
#+end_src

** Syntax Reporting

#+begin_src emacs-lisp
  (use-package flycheck)
#+end_src

** LSP

#+begin_src emacs-lisp
  (use-package lsp-mode
    :init (add-hook 'rust-mode-hook #'lsp)
    :commands (lsp lsp-deferred)
    :hook
    (lsp-mode . efs/lsp-mode-setup)
    :config
    (lsp-enable-which-key-integration t))
    ; (add-hook 'rust-mode-hook #'lsp)

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))
#+end_src

** Completions

#+begin_src emacs-lisp
  (use-package company
    :after lsp-mode
    :hook
    (lsp-mode . company-mode)
    :bind (:map company-active-map
                ("<tab>" . company-complete-selection))
    (:map lsp-mode-map
          ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))
  (add-hook 'after-init-hook 'global-company-mode)
#+end_src

** Languages
*** Python

[[https://pypi.org/project/python-lsp-server/][*pylsp*]]
1. *Command:* /pip3 install python-lsp-server[all]/
2. put the pylsp in path

#+begin_src emacs-lisp
  (use-package python-mode
    :hook (python-mode . lsp-deferred))
  (use-package pyvenv
    :after python-mode
    :config
    (pyvenv-mode 1))
#+end_src

*** Rust
*Rust Analyzer*
   - /curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh/ this placed file in ~/.cargo/
   - To uninstall run: /rustup self uninstall/ from https://rust-lang.github.io/rustup/installation/index.html
   - for lsp: /rustup component add rust-analyzer/
   - locate its location with: rustup which rust-analyzer
   - add that path to /$PATH/

#+begin_src emacs-lisp
  ;; add cargo to PATH for compile command
  ; (setenv "PATH" (concat "/Users/tcron/.cargo/bin:" (getenv "PATH")))
  (setenv "PATH" (concat (expand-file-name "~/.cargo/bin") ":" (getenv "PATH")))
  ;; add rust-analyzer to exec-path for lsp-mode
  (add-to-list 'exec-path "~/.cargo/bin")
  (use-package rust-mode
  :init
  (setq rust-format-on-save t))
  (add-hook 'rust-mode-hook
            (lambda () (setq indent-tabs-mode nil)))
#+end_src
*** C
#+begin_src emacs-lisp
(add-hook 'c-mode-hook 'lsp)
#+end_src
*** Other ones not yet setup
JavaScript
   npm install -g typescript typescript-language-server
   put the typescript-language-server in /usr/local/bin
   to use create jsconfig.json or tsconfig.json
 Markdown
   brew install marksman
   installed to /opt/homebrew/Cellar/marksman
 Go
   brew install go
   go install golang.org/x/tools/gopls@latest
   add $HOME/bin/go to $PATH
 Latex
   brew install texlab
 wgsl
   cargo install --git https://github.com/wgsl-analyzer/wgsl-analyzer wgsl_analyzer
 zig
   brew install zig
   LSP:
   brew install z
* PDF/Latex

#+begin_src emacs-lisp
(use-package pdf-tools
  :config
  (pdf-tools-install))
#+end_src

* Bug Fixes
#+begin_src emacs-lisp
  ;; fix svg display issue on macos: https://github.com/caldwell/build-emacs/issues/126
  (add-to-list 'image-types 'svg)
  (when (string= system-type "darwin")       
    (setq dired-use-ls-dired nil))
#+end_src

* Other Things to Remember To Install
 - /ghostscript/ for /pdf/ viewing
