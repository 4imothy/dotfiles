set number relativenumber
set nocompatible
set nobackup
set nowritebackup
set shiftwidth=4
set tabstop=4
set expandtab
set wrap
set incsearch
set ignorecase
set smartcase
set signcolumn=no
set hlsearch
set encoding=utf-8
set timeoutlen=1000
set ttimeoutlen=0
set clipboard+=unnamed
set splitbelow
set directory=$HOME/.vim/swapfiles/
set hidden

if ($TERM ==# 'alacritty' || $TERM ==# 'xterm' )
    set term=xterm-256color
endif
filetype on
filetype plugin on
filetype indent on

if has('persistent_undo')
    set undofile
    let &undodir=$HOME . '/.vim/undodir/'
    if filewritable(&undodir) == 0 && exists("*mkdir")
        call mkdir(&undodir, "p", 0700)
    endif
    set undofile
    set undolevels=1000
    set undoreload=10000
endif

let &t_ZH="\e[3m"
let &t_ZR="\e[23m"

if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
                \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    source $MYVIMRC
endif

syntax on
call plug#begin()

Plug 'sainnhe/everforest'
Plug 'vim-airline/vim-airline'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-fugitive'
Plug 'hrsh7th/vim-vsnip'
Plug 'hrsh7th/vim-vsnip-integ'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/vim-lsp'
Plug 'easymotion/vim-easymotion'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

call plug#end()

for f in globpath('~/.vim', '*.vim', 0, 1, 0)
        execute 'source' f
endfor

let g:mapleader = ","
nnoremap <leader>n :bnext<cr>
nnoremap <leader>p :bprevious<cr>
nnoremap <leader>x :bdelete<cr>
nnoremap <leader>t :term++rows=10<cr>
nnoremap <leader>e :open .<CR>
nnoremap <leader>d :LspDocumentDiagnostics<CR>
map <leader>s <Plug>(easymotion-s)
map <leader>w <Plug>(easymotion-w)
nnoremap <silent> <leader>e :Files<CR>
nnoremap <silent> <Leader>f :Rg<CR>
nnoremap <silent> <leader>b :Buffers<CR>
nnoremap <silent> <Leader>/ :BLines<CR>

imap <expr> <Tab> vsnip#available(1) ? '<Plug>(vsnip-expand-or-jump)' : (pumvisible() ? asyncomplete#close_popup() : "\<Tab>")
smap <expr> <Tab> vsnip#available(1) ? '<Plug>(vsnip-expand-or-jump)' : (pumvisible() ? asyncomplete#close_popup() : "\<Tab>")

let g:vsnip_snippet_dir = expand('~/.vim/snippets')

let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6 } }

let g:airline#extensions#tabline#enabled = 1
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = ''
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_symbols.branch = ''
let g:airline_symbols.dirty=''

set background=dark
if $COLORTERM == 'truecolor'
    if has('termguicolors')
        set termguicolors
    endif
    let g:everforest_background = 'soft'
    let g:everforest_better_performance = 1
    let g:airline_theme = 'everforest'
    colorscheme everforest
else
    colorscheme default
endif

fun! StripTrailingWhitespace()
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  call cursor(l, c)
endfun

autocmd BufWritePre * :call StripTrailingWhitespace()
autocmd BufNewFile,BufRead *.tex :set filetype=tex
autocmd FileType tex,txt,md setlocal spell spelllang=en_us
