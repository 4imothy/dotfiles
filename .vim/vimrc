set number relativenumber
set nocompatible
set nobackup
set nowritebackup
set shiftwidth=4
set tabstop=4
set expandtab
set linebreak
set incsearch
set ignorecase
set smartcase
set signcolumn=no
set hlsearch
set nowrap
set encoding=utf-8
set timeoutlen=1000
set ttimeoutlen=0
set updatetime=0 " fix for floating disappearing on swap file writing, https://github.com/prabirshrestha/vim-lsp/issues/1510
set clipboard+=unnamed
set splitbelow
set hidden
set background=dark
set pumheight=5
set directory=$HOME/.vim/swapfiles/
set noshowmode
set shortmess+=c
set guioptions-=e
set laststatus=2
set scrolloff=5
set fillchars+=vert:â”‚
set spellcapcheck=

" TODO using something like the BufTabLine but put stars around when the name
" comes from the process I think this functionality exists in some other
" plugin i don't remember bufferline?

syntax on
filetype on
filetype plugin on
filetype indent on

if ($TERM ==# 'alacritty' || $TERM ==# 'xterm' )
    set term=xterm-256color
endif

let g:my_vim_dir = expand('~/.vim')

if has('persistent_undo')
    set undofile
    let &undodir=g:my_vim_dir . '/undodir/'

    if filewritable(&undodir) == 0 && exists("*mkdir")
        call mkdir(&undodir, "p", 0700)
    endif
    set undofile
    set undolevels=1000
    set undoreload=10000
endif

let g:vsnip_snippet_dir=expand('~/.vim/snippets/')

let &t_ZH="\e[3m"
let &t_ZR="\e[23m"

if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
                \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    source $MYVIMRC
endif

let g:mapleader = ","
call plug#begin()

Plug 'catppuccin/vim', { 'as': 'catppuccin' }
Plug 'vim-airline/vim-airline'
Plug 'tpope/vim-fugitive'
Plug 'hrsh7th/vim-vsnip'
Plug 'hrsh7th/vim-vsnip-integ'
Plug 'prabirshrestha/vim-lsp'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
Plug 'prabirshrestha/asyncomplete-file.vim'
Plug 'easymotion/vim-easymotion'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'mbbill/undotree'
execute 'source' fnameescape(g:my_vim_dir . '/treegrep.vim')

call plug#end()

command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --hidden --column --line-number --no-heading --color=always --follow --smart-case -- '.shellescape(<q-args>), 1,
  \   fzf#vim#with_preview(), <bang>0)

inoremap <expr> <Tab> vsnip#available(1) ? '<Plug>(vsnip-expand-or-jump)' : (pumvisible() ? asyncomplete#close_popup() : "\<Tab>")
snoremap <expr> <Tab> vsnip#available(1) ? '<Plug>(vsnip-expand-or-jump)' : (pumvisible() ? asyncomplete#close_popup() : "\<Tab>")

if $COLORTERM == 'truecolor'
    if has('termguicolors')
        set termguicolors
    endif

    colorscheme catppuccin_latte
else
    colorscheme desert
endif

for f in globpath('~/.vim', '*.vim', 0, 1, 0)
    if fnamemodify(f, ':t') !=# 'treegrep.vim'
        execute 'source' f
    endif
endfor

nnoremap <expr> j v:count == 0 ? 'gj' : 'j'
nnoremap <expr> k v:count == 0 ? 'gk' : 'k'

nnoremap <leader>n :bnext<cr>
nnoremap <leader>p :bprevious<cr>
nnoremap <leader>x :bdelete<cr>
" nnoremap <leader>t :terminal ++curwin<cr>
nnoremap <leader>u :call EnterUndotree()<cr>
noremap <leader>c :call ToggleComment()<CR>
noremap <leader>s <Plug>(easymotion-s)
noremap <leader>w <Plug>(easymotion-w)
nnoremap <silent> <leader>e :Files<CR>
nnoremap <silent> <Leader>f :Rg<CR>
nnoremap <silent> <leader>b :Buffers<CR>
nnoremap <silent> <Leader>/ :BLines<CR>

" TODO make this call a function which autorefreshes that window on save of
" the buffer
" :h vim-lsp /g:lsp_work_done_progress_enabled

nnoremap <leader><leader>d :LspDocumentDiagnostics --buffers=*<CR>
nnoremap <leader><leader>n :LspNextDiagnostic<CR>
nnoremap <leader><leader>p :LspPreviousDiagnostic<CR>
nnoremap <leader><leader>h :LspHover<CR>
nnoremap <leader><leader>r :LspRename<CR>

fun! StripTrailingWhitespace()
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  call cursor(l, c)
endfun

function! ToggleComment()
    if getline(".") =~ '^\s*$'
        return
    endif

    let current_line = getline(".")
    let current_line = substitute(current_line, '^\s*', '', '')

    if current_line =~ '^' . b:comment
        execute 'silent s/^\s*' . b:comment.'\( \)\?//g'
        execute 'silent s/\s*' . b:end_comment .'$//g'
    else
        execute 'silent s/^\s*/&' . b:comment .' /g'
        execute 'silent s/\s*$/\ ' . b:end_comment .'/g'
    endif
endfunction

for d in glob('~/.vim/spell/*.add', 1, 1)
    if filereadable(d) && (!filereadable(d . '.spl') || getftime(d) > getftime(d . '.spl'))
        silent exec 'mkspell! ' . fnameescape(d)
    endif
endfor

autocmd BufWritePre * :call StripTrailingWhitespace()
autocmd BufNewFile,BufRead *.tex :set filetype=tex
autocmd FileType tex,txt,markdown setlocal spell spelllang=en_us wrap linebreak
autocmd FileType markdown setlocal conceallevel=3
autocmd TerminalWinOpen * nnoremap <buffer> <leader>x :bdelete!<CR>

" https://github.com/mbbill/undotree/issues/156
function! EnterUndotree()
    execute 'UndotreeShow'

    let is_glitched = getreg('%') == 'undotree_2'

    if is_glitched
        wincmd w
        wincmd w
        wincmd p
    else
        execute 'UndotreeFocus'
    endif
endfunction
