set number relativenumber
set nocompatible
set nobackup
set nowritebackup
set shiftwidth=4
set tabstop=4
set expandtab
set wrap
set linebreak
set incsearch
set ignorecase
set smartcase
set signcolumn=no
set hlsearch
set encoding=utf-8
set timeoutlen=1000
set ttimeoutlen=0
set updatetime=0 " fix for floating disappearing on swap file writing, https://github.com/prabirshrestha/vim-lsp/issues/1510
set clipboard+=unnamed
set splitbelow
set hidden
set background=dark
set pumheight=5
set directory=$HOME/.vim/swapfiles/
set noshowmode
set shortmess+=c
set scrolloff=5
syntax on
filetype on
filetype plugin on
filetype indent on

if ($TERM ==# 'alacritty' || $TERM ==# 'xterm' )
    set term=xterm-256color
endif

let g:my_vim_dir = expand('~/.vim')

if has('persistent_undo')
    set undofile
    let &undodir=g:my_vim_dir . '/undodir/'

    if filewritable(&undodir) == 0 && exists("*mkdir")
        call mkdir(&undodir, "p", 0700)
    endif
    set undofile
    set undolevels=1000
    set undoreload=10000
endif

let g:vsnip_snippet_dir=expand('~/.vim/snippets/')

let &t_ZH="\e[3m"
let &t_ZR="\e[23m"

if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
                \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    source $MYVIMRC
endif

call plug#begin()

Plug 'sainnhe/everforest'
Plug 'vim-airline/vim-airline'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-fugitive'
Plug 'hrsh7th/vim-vsnip'
Plug 'hrsh7th/vim-vsnip-integ'
Plug 'prabirshrestha/vim-lsp'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
Plug 'prabirshrestha/asyncomplete-file.vim'
Plug 'easymotion/vim-easymotion'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

call plug#end()

for f in globpath('~/.vim', '*.vim', 0, 1, 0)
        execute 'source' f
endfor

let g:mapleader = ","
nnoremap <expr> j v:count == 0 ? 'gj' : 'j'
nnoremap <expr> k v:count == 0 ? 'gk' : 'k'

nnoremap <leader>n :bnext<cr>
nnoremap <leader>p :bprevious<cr>
nnoremap <leader>x :bdelete<cr>
nnoremap <leader>t :terminal ++curwin<cr>
nnoremap <leader>e :open .<CR>
noremap <leader>c :call CommentLines()<CR>
noremap <leader>u :call UncommentLines()<CR>
noremap <leader>s <Plug>(easymotion-s)
noremap <leader>w <Plug>(easymotion-w)
nnoremap <silent> <leader>e :Files<CR>
nnoremap <silent> <Leader>f :Rg<CR>
nnoremap <silent> <leader>b :Buffers<CR>
nnoremap <silent> <Leader>/ :BLines<CR>

nnoremap <leader><leader>d :LspDocumentDiagnostics<CR>
nnoremap <leader><leader>n :LspNextDiagnostic<CR>
nnoremap <leader><leader>p :LspPreviousDiagnostic<CR>
nnoremap <leader><leader>h :LspHover<CR>
nnoremap <leader><leader>r :LspRename<CR>

command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --hidden --column --line-number --no-heading --color=always --follow --smart-case -- '.shellescape(<q-args>), 1,
  \   fzf#vim#with_preview(), <bang>0)

inoremap <expr> <Tab> vsnip#available(1) ? '<Plug>(vsnip-expand-or-jump)' : (pumvisible() ? asyncomplete#close_popup() : "\<Tab>")
snoremap <expr> <Tab> vsnip#available(1) ? '<Plug>(vsnip-expand-or-jump)' : (pumvisible() ? asyncomplete#close_popup() : "\<Tab>")

let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6 } }

if $COLORTERM == 'truecolor'
    if has('termguicolors')
        set termguicolors
    endif
    let g:everforest_background='soft'
    let g:everforest_better_performance=1
    let g:airline_theme='everforest'
    colorscheme everforest
else
    colorscheme default
endif

fun! StripTrailingWhitespace()
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  call cursor(l, c)
endfun

fun! RegexLiteral(str)
    return escape(a:str, "*$.^/")
endfun

fun! CommentLines()
    if b:Comment != ""
        exe ":s/^\\(\\s*\\)/\\1".escape(b:Comment, '/')." /e"
        exe ":s/$/ ".escape(b:EndComment, '/')."/e"
    endif
endfun

fun! UncommentLines()
    exe ":s/^\\(\\s*\\)".RegexLiteral(b:Comment)."\\s*/\\1/e"
    exe ":s/\\s*".RegexLiteral(b:EndComment)."\\s*$//e"
endfun

autocmd BufWritePre * :call StripTrailingWhitespace()
autocmd BufNewFile,BufRead *.tex :set filetype=tex
autocmd FileType tex,txt,md setlocal spell spelllang=en_us wrap linebreak
autocmd TerminalWinOpen * nnoremap <buffer> <leader>x :bdelete!<CR>
